target_sf2$end_date<-point_sf$end_dates[i]
#
# # Subset dataset of PA observations for only monitors selected from above
# # Also select for time range of relevant wildfire
# pm_temp is df of all PA obs w/in 540km of wildfire i for dates wildfire i took place
pm_temp<-pm_all%>%filter(ID %in% target_sf2$ID & date_only >= "2020-07-01" & date_only <= "2020-11-01")
pm_temp<-data.table(pm_temp)
mydfs[[i]]<-pm_temp
}
}
View(point_sf)
mydfs<-list()
for(i in 1:10){ #nrow = 258
target_sf2 <- target_sf %>% # target_sf stays the same
mutate(Dist = as.numeric(st_distance(point_sf[i], target_sf, by_element = TRUE))) %>%
# Filter the records with Dist <= 540000 (m)
filter(Dist <= 540000)
#
# # Reattach wildfire data to df of monitors within 540km of wildfire i
if((nrow(target_sf2)>0)==T){
target_sf2$incident_id<-point_sf$incident_id[i]
target_sf2$incident_name<-point_sf$incident_name[i]
target_sf2$start_date<-point_sf$start_dates[i]
target_sf2$end_date<-point_sf$end_dates[i]
#
# # Subset dataset of PA observations for only monitors selected from above
# # Also select for time range of relevant wildfire
# pm_temp is df of all PA obs w/in 540km of wildfire i for dates wildfire i took place
pm_temp<-pm_all%>%filter(ID %in% target_sf2$ID & date_only >= "2020-07-01" & date_only <= "2020-11-01")
mydfs[[i]]<-pm_temp
}
}
for(i in 1:10){ #nrow = 258
target_sf2 <- target_sf %>% # target_sf stays the same
mutate(target_sf2[, Dist] = as.numeric(st_distance(point_sf[i], target_sf, by_element = TRUE))) %>%
# Filter the records with Dist <= 540000 (m)
filter(Dist <= 540000)
#
# # Reattach wildfire data to df of monitors within 540km of wildfire i
if((nrow(target_sf2)>0)==T){
target_sf2$incident_id<-point_sf$incident_id[i]
target_sf2$incident_name<-point_sf$incident_name[i]
target_sf2$start_date<-point_sf$start_dates[i]
target_sf2$end_date<-point_sf$end_dates[i]
#
# # Subset dataset of PA observations for only monitors selected from above
# # Also select for time range of relevant wildfire
# pm_temp is df of all PA obs w/in 540km of wildfire i for dates wildfire i took place
pm_temp<-pm_all%>%filter(ID %in% target_sf2$ID & date_only >= "2020-07-01" & date_only <= "2020-11-01")
mydfs[[i]]<-pm_temp
}
}
mydfs<-list()
for(i in 1:10){ #nrow = 258
target_sf2 <- target_sf %>% # target_sf stays the same
target_sf2[, Dist := as.numeric(st_distance(point_sf[i], target_sf, by_element = TRUE))]
target_sf2 <- target_sf2[Dist <= 540000]
# Filter the records with Dist <= 540000 (m)
# # Reattach wildfire data to df of monitors within 540km of wildfire i
if((nrow(target_sf2)>0)==T){
target_sf2[, incident_id = point_sf$incident_id[i]]
target_sf2[, incident_name = point_sf$incident_name[i]]
target_sf2[ ,start_date = point_sf$start_dates[i]]
target_sf2[, end_date = point_sf$end_dates[i]]
#
# # Subset dataset of PA observations for only monitors selected from above
# # Also select for time range of relevant wildfire
# pm_temp is df of all PA obs w/in 540km of wildfire i for dates wildfire i took place
pm_temp<-pm_all%>%filter(ID %in% target_sf2$ID & date_only >= "2020-07-01" & date_only <= "2020-11-01")
mydfs[[i]]<-pm_temp
}
}
mydfs<-list()
for(i in 1:10){ #nrow = 258
target_sf2 <- target_sf # target_sf stays the same
target_sf2[, Dist := as.numeric(st_distance(point_sf[i], target_sf, by_element = TRUE))]
target_sf2 <- target_sf2[Dist <= 540000]
# Filter the records with Dist <= 540000 (m)
# # Reattach wildfire data to df of monitors within 540km of wildfire i
if((nrow(target_sf2)>0)==T){
target_sf2[, incident_id = point_sf$incident_id[i]]
target_sf2[, incident_name = point_sf$incident_name[i]]
target_sf2[ ,start_date = point_sf$start_dates[i]]
target_sf2[, end_date = point_sf$end_dates[i]]
#
# # Subset dataset of PA observations for only monitors selected from above
# # Also select for time range of relevant wildfire
# pm_temp is df of all PA obs w/in 540km of wildfire i for dates wildfire i took place
pm_temp<-pm_all%>%filter(ID %in% target_sf2$ID & date_only >= "2020-07-01" & date_only <= "2020-11-01")
mydfs[[i]]<-pm_temp
}
}
rm(list=ls())
if (!require('data.table')) {
install.packages('data.table')
library(data.table)
}
if (!require('rgdal')) {
install.packages('rgdal')
library(rgdal)
}
if (!require('tidyverse')) {
install.packages('tidyverse')
library(tidyverse)
}
if (!require('sf')) {
install.packages('sf')
library(sf)
}
#setwd('purpleair')
# Read in wildfire Purple Air shapefile - 3967 monitors
pa_shp<-readOGR(dsn="purpleair/8_PA_wildfires_shp")
pa_data<-pa_shp@data
pm_all<-fread("purpleair/7_output/CA_PM25_allPurpleAir_2020.csv")
pm_all$date_only<-as.POSIXct(as.numeric(as.character(pm_all$created_at)), origin="1970-01-01", tz="GMT")
pm_all$date_only<-as.Date(pm_all$date_only,origin="1970-01-01",format='%Y-%m-%d')
# Find closest wildfire to each monitor
fire_20<-read.csv('purpleair/6_CALFIRE/CA_fires_2020.csv')
# Find all dates for wildfires
fire_dates<-fire_20[,c("incident_name","incident_id","incident_longitude",
"incident_latitude","incident_dateonly_created","incident_dateonly_extinguished")]
date_ranges<-fire_dates
names(date_ranges)[5:6]<-c("start_dates","end_dates")
date_ranges<-date_ranges[!duplicated(date_ranges),]
row.names(date_ranges)<-1:nrow(date_ranges)
for(i in 1:nrow(date_ranges)){
date_ranges$end_dates[i]<-ifelse(date_ranges$end_dates[i]=="",date_ranges$start_dates[i],date_ranges$end_dates[i])
}
# Find all sensors within 540km of wildfire for each date range
site_coordinates_crs<-CRS("+proj=longlat +datum=WGS84")
point_sf <- st_as_sf(date_ranges, coords = c("incident_longitude", "incident_latitude"),crs=site_coordinates_crs)
# Set the projection to EPSG 4326 (long-lat)
st_crs(point_sf) <- 4326
# Specify the source of X and Y coordinates
target_sf <- st_as_sf(pa_data, coords = c("Lon", "Lat"),crs=site_coordinates_crs)
# Set the projection to EPSG 4326 (long-lat)
st_crs(target_sf) <- 4326
#st_crs(coordinates)
#coordinates_aes<-st_transform(coordinates,crs(nlcd))
# Loop through point_sf row by row to get a df for each wildfire
# Save df from each loop iteration to df list mydfs
mydfs<-list()
for(i in 11:20){ #nrow = 258
target_sf2 <- target_sf %>% # target_sf stays the same
mutate(Dist = as.numeric(st_distance(point_sf[c(i),], target_sf, by_element = TRUE))) %>%
# Filter the records with Dist <= 540000 (m)
filter(Dist <= 540000)
#
# # Reattach wildfire data to df of monitors within 540km of wildfire i
if((nrow(target_sf2)>0)==T){
target_sf2$incident_id<-point_sf$incident_id[i]
target_sf2$incident_name<-point_sf$incident_name[i]
target_sf2$start_date<-point_sf$start_dates[i]
target_sf2$end_date<-point_sf$end_dates[i]
#
# # Subset dataset of PA observations for only monitors selected from above
# # Also select for time range of relevant wildfire
# pm_temp is df of all PA obs w/in 540km of wildfire i for dates wildfire i took place
pm_temp<-pm_all%>%filter(ID %in% target_sf2$ID & date_only >= "2020-07-01" & date_only <= "2020-11-01")
mydfs[[i]]<-pm_temp
}
}
pm_clean<-rbindlist(mydfs)#6696675 obs - 48 million
pm_final<-pm_clean[which(!duplicated(pm_clean)),] #7.8 million obs
fwrite(pm_final,'pm_clean_11-20.csv',na="",row.names=F)
fwrite(pm_final,'pm_clean_11-20.csv',na="",row.names=F)
target_sf<-data.table(target_sf)
point_sf<-data.table(point_sf)
target_sf2 <- target_sf  # target_sf stays the same
mydfs<-list()
for(i in 1:1){ #nrow = 258
target_sf2 <- target_sf  # target_sf stays the same
target_sf2[, Dist := as.numeric(st_distance(point_sf[i], target_sf, by_element=TRUE))]
# Filter the records with Dist <= 540000 (m)
target_sf2[, Dist <= 540000]
# # Reattach wildfire data to df of monitors within 540km of wildfire i
if((nrow(target_sf2)>0)==T){
target_sf2[, incident_id = point_sf[ incident_id, i]]
target_sf2[, incident_name = point_sf[incident_name, i]]
target_sf2[, start_date = point_sf[start_dates, i]]
target_sf2[, end_date = point_sf[end_dates, i]]
#
# # Subset dataset of PA observations for only monitors selected from above
# # Also select for time range of relevant wildfire
# pm_temp is df of all PA obs w/in 540km of wildfire i for dates wildfire i took place
pm_temp<-pm_all[, ID %in% target_sf2$ID]
pm_temp<-pm_temp[, date_only >= "2020-07-01"]
pm_temp<-pm_temp[, date_only <= "2020-11-01"]
mydfs[[i]]<-pm_temp
}
}
rm(list=ls())
if (!require('data.table')) {
install.packages('data.table')
library(data.table)
}
if (!require('rgdal')) {
install.packages('rgdal')
library(rgdal)
}
if (!require('tidyverse')) {
install.packages('tidyverse')
library(tidyverse)
}
if (!require('sf')) {
install.packages('sf')
library(sf)
}
#setwd('purpleair')
# Read in wildfire Purple Air shapefile - 3967 monitors
pa_shp<-readOGR(dsn="purpleair/8_PA_wildfires_shp")
pa_data<-pa_shp@data
pm_all<-fread("purpleair/7_output/CA_PM25_allPurpleAir_2020.csv")
pm_all$date_only<-as.POSIXct(as.numeric(as.character(pm_all$created_at)), origin="1970-01-01", tz="GMT")
pm_all$date_only<-as.Date(pm_all$date_only,origin="1970-01-01",format='%Y-%m-%d')
# Find closest wildfire to each monitor
fire_20<-read.csv('purpleair/6_CALFIRE/CA_fires_2020.csv')
# Find all dates for wildfires
fire_dates<-fire_20[,c("incident_name","incident_id","incident_longitude",
"incident_latitude","incident_dateonly_created","incident_dateonly_extinguished")]
date_ranges<-fire_dates
names(date_ranges)[5:6]<-c("start_dates","end_dates")
date_ranges<-date_ranges[!duplicated(date_ranges),]
row.names(date_ranges)<-1:nrow(date_ranges)
for(i in 1:nrow(date_ranges)){
date_ranges$end_dates[i]<-ifelse(date_ranges$end_dates[i]=="",date_ranges$start_dates[i],date_ranges$end_dates[i])
}
# Find all sensors within 540km of wildfire for each date range
site_coordinates_crs<-CRS("+proj=longlat +datum=WGS84")
point_sf <- st_as_sf(date_ranges, coords = c("incident_longitude", "incident_latitude"),crs=site_coordinates_crs)
# Set the projection to EPSG 4326 (long-lat)
st_crs(point_sf) <- 4326
# Specify the source of X and Y coordinates
target_sf <- st_as_sf(pa_data, coords = c("Lon", "Lat"),crs=site_coordinates_crs)
# Set the projection to EPSG 4326 (long-lat)
st_crs(target_sf) <- 4326
View(d1)
names(d1)
rm(list=ls())
#TracMyAir uses the API web service from weather.gov. Their information site
#is https://www.weather.gov/documentation/services-web-api
library(httr)
library(jsonlite)
library(data.table)
dat<-fread('/nas/longleaf/home/revathi/purpleair/2_sensor_lists/WF_io_pairs_540km_Dec21.csv')
names(dat)<-c("out_ID","dist","lon","lat","in_ID")
dat$lon<-gsub("c","",dat$lon)
dat$lon<-gsub("\\(","",dat$lon)
dat$lat<-gsub("\\)","",dat$lat)
for(i in 1){
mylon<-dat$lon[i]
mylat<-dat$lat[i]
stn_api=paste("https://api.weather.gov/points/",mylat,",",mylon,"/stations")
res = GET(stn_api)
stations = fromJSON(rawToChar(res$content))
stations<-stations$features
}
for(i in 1){
mylon<-dat$lon[i]
mylat<-dat$lat[i]
stn_api=paste("https://api.weather.gov/points/",mylat,",",mylon,"/stations",sep="")
res = GET(stn_api)
stations = fromJSON(rawToChar(res$content))
stations<-stations$features
}
View(stations)
View(stations)
stations$properties.stationIdentifier
res2 = GET("https://api.weather.gov/stations/KRDU/observations?start=2020-01-01T00%3A00%3A00Z&end=2021-01-01T00%3A00%3A00Z")
(stations)
names(stations)
stations$properties
names(stations$properties)
stations$properties@stationIdentifier
stations$properties$stationIdentifier
nrow(stations$properties$stationIdentifier)
length(stations$properties$stationIdentifier)
stations$properties$stationIdentifier
test<-stations$properties$stationIdentifier
test[1]
i=1
j
j=1
mystations<-stations$properties$stationIdentifier
res2 = GET(paste("https://api.weather.gov/stations/",mystations[j],"/observations?start=2020-01-01T00%3A00%3A00Z&end=2021-01-01T00%3A00%3A00Z",sep=""))
names(res2)
res2$content
View(res2)
myobs = fromJSON(rawToChar(res2$content))
View(myobs)
j=2
res2 = GET(paste("https://api.weather.gov/stations/",mystations[j],"/observations?start=2020-01-01T00%3A00%3A00Z&end=2021-01-01T00%3A00%3A00Z",sep=""))
myobs = fromJSON(rawToChar(res2$content))
View(res2)
View(myobs)
res2 = GET(paste("https://api.weather.gov/stations/",mystations[j],"/observations?start=2020-01-01T00%3A00%3A00Z&end=2021-01-01T00%3A00%3A00Z",sep=""))
myobs = fromJSON(rawToChar(res2$content))
myobs<-myobs$features
j=3
res2 = GET(paste("https://api.weather.gov/stations/",mystations[j],"/observations?start=2020-01-01T00%3A00%3A00Z&end=2021-01-01T00%3A00%3A00Z",sep=""))
myobs = fromJSON(rawToChar(res2$content))
myobs<-myobs$features
j=20
res2 = GET(paste("https://api.weather.gov/stations/",mystations[j],"/observations?start=2020-01-01T00%3A00%3A00Z&end=2021-01-01T00%3A00%3A00Z",sep=""))
myobs = fromJSON(rawToChar(res2$content))
myobs<-myobs$features
j=7
res2 = GET(paste("https://api.weather.gov/stations/",mystations[j],"/observations?start=2020-01-01T00%3A00%3A00Z&end=2021-01-01T00%3A00%3A00Z",sep=""))
myobs = fromJSON(rawToChar(res2$content))
myobs<-myobs$features
j=31
res2 = GET(paste("https://api.weather.gov/stations/",mystations[j],"/observations?start=2020-01-01T00%3A00%3A00Z&end=2021-01-01T00%3A00%3A00Z",sep=""))
myobs = fromJSON(rawToChar(res2$content))
myobs<-myobs$features
j=39
res2 = GET(paste("https://api.weather.gov/stations/",mystations[j],"/observations?start=2020-01-01T00%3A00%3A00Z&end=2021-01-01T00%3A00%3A00Z",sep=""))
myobs = fromJSON(rawToChar(res2$content))
myobs<-myobs$features
View(stations)
obs_api=paste("https://api.weather.gov/stations/",mystations[j],"/observations?start=2020-01-01T00%3A00%3A00Z&end=2021-01-01T00%3A00%3A00Z",sep="")
res2 = GET(obs_api)
myobs = fromJSON(rawToChar(res2$content))
myobs<-myobs$features
obs_api
stations$id
View(stations)
stations$properties$stationIdentifier
obs_api=paste("https://api.weather.gov/stations/",mystations[j],"/observations?start=2020-01-01T00%3A00%3A00Z&end=2021-01-01T00%3A00%3A00Z",sep="")
res2 = GET(obs_api)
myobs = fromJSON(rawToChar(res2$content))
myobs<-myobs$features
obs_api=paste("https://api.weather.gov/stations/",mystations[j],"/observations?start=2020-01-01T00%3A00%3A00Z&end=2022-02-01T00%3A00%3A00Z",sep="")
res2 = GET(obs_api)
myobs = fromJSON(rawToChar(res2$content))
myobs<-myobs$features
View(myobs)
obs_api=paste("https://api.weather.gov/stations/",mystations[j],"/observations?start=2020-01-01T00%3A00%3A00Z&end=2022-02-01T00%3A00%3A00Z",sep="")
res2 = GET(obs_api)
myobs = fromJSON(rawToChar(res2$content))
myobs$type
myobs$`@context`
View(myobs)
View(myobs)
myobs$features
myobs$features$properties
myobs$features$properties$windSpeed
myobs$features$properties$timestamp
j=7
obs_api=paste("https://api.weather.gov/stations/",mystations[j],"/observations?start=2020-01-01T00%3A00%3A00Z&end=2022-02-01T00%3A00%3A00Z",sep="")
res2 = GET(obs_api)
myobs = fromJSON(rawToChar(res2$content))
myobs$features$properties$timestamp
j=32
mystations<-stations$properties$stationIdentifier
obs_api=paste("https://api.weather.gov/stations/",mystations[j],"/observations?start=2020-01-01T00%3A00%3A00Z&end=2022-02-01T00%3A00%3A00Z",sep="")
res2 = GET(obs_api)
myobs = fromJSON(rawToChar(res2$content))
myobs$features$properties$timestamp
length(myobs$features$properties$timestamp)
j=27
mystations<-stations$properties$stationIdentifier
obs_api=paste("https://api.weather.gov/stations/",mystations[j],"/observations?start=2020-01-01T00%3A00%3A00Z&end=2022-02-01T00%3A00%3A00Z",sep="")
res2 = GET(obs_api)
myobs = fromJSON(rawToChar(res2$content))
myobs$features$properties$timestamp
rm(list=ls())
#TracMyAir uses the API web service from weather.gov. Their information site
#is https://www.weather.gov/documentation/services-web-api
library(httr)
library(jsonlite)
library(data.table)
dat<-fread('/nas/longleaf/home/revathi/purpleair/2_sensor_lists/WF_io_pairs_540km_Dec21.csv')
names(dat)<-c("out_ID","dist","lon","lat","in_ID")
dat$lon<-gsub("c","",dat$lon)
dat$lon<-gsub("\\(","",dat$lon)
dat$lat<-gsub("\\)","",dat$lat)
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
rm(list=ls())
library(plyr)
library(dplyr)
library(ggplot2)
library(data.table)
library(janitor)
library(tidyr)
setwd('/nas/longleaf/home/revathi/HAQAST/thesis/Code/5_figures/PWA/results/')
myfiles<-list.files()[grep("O3",list.files())]
myfiles
data1<-fread(myfiles[1])
data2<-fread(myfiles[2])
data3<-fread(myfiles[3])
data4<-fread(myfiles[4])
data5<-fread(myfiles[5])
data<-rbindlist(mget(ls()[grep("data",ls())]))
data[which(data$Dataset=="CMAQ_1hr"),]$Dataset<-c("EPA - 6mDMA1")
data[which(data$Dataset=="CMAQ_MDA8"),]$Dataset<-c("EPA - 6mMDA8")
colors <- c("EPA - 6mDMA1" = "blue", "NACR" = "red",  "FAQSD" = "gray","EPA - 6mMDA8" = "purple", "GBD" = "green")
data$colour<-c("")
data[which(data$Dataset=="EPA - 6mDMA1"),]$colour<-1
data[which(data$Dataset=="NACR"),]$colour<-2
data[which(data$Dataset=="FAQSD"),]$colour<-3
data[which(data$Dataset=="EPA - 6mMDA8"),]$colour<-4
data[which(data$Dataset=="GBD"),]$colour<-5
data$variable<-as.factor(data$colour)
# Created by: Revathi Muralidharan
# Last updated: 4/12/22
rm(list=ls())
library(plyr)
library(dplyr)
library(ggplot2)
library(data.table)
library(janitor)
library(tidyr)
# Create figure
# Set working directory
setwd('/nas/longleaf/home/revathi/HAQAST/thesis/Code/5_figures/PWA/results/')
myfiles<-list.files()[grep("O3",list.files())]
data1<-fread(myfiles[1])
data2<-fread(myfiles[2])
data3<-fread(myfiles[3])
data4<-fread(myfiles[4])
data5<-fread(myfiles[5])
data<-rbindlist(mget(ls()[grep("data",ls())]))
data[which(data$Dataset=="CMAQ_1hr"),]$Dataset<-c("EPA - 6mDMA1")
data[which(data$Dataset=="CMAQ_MDA8"),]$Dataset<-c("EPA - 6mMDA8")
data9<-data[which(data$Year==2009),]
sd(data9$PWA_O3)/mean(data9$PWA_O3)
data10<-data[which(data$Year==2010),]
sd(data10$PWA_O3)/mean(data10$PWA_O3)
data$linetype<-1
data[which(data$Dataset=="GBD"),]$linetype<-2
data[which(data$Dataset=="Zhang et al."),]$linetype<-2
data$myline<-as.factor(data$linetype)
data$Dataset <- factor(data$Dataset,
levels = c("EPA - 6mDMA1","EPA - 6mMDA8","FAQSD","NACR","GBD"))
colors <- c("EPA - 6mDMA1" = "blue", "EPA - 6mMDA8" = "#00FFFF", "NACR" = "red",  "FAQSD" = "gray","GBD" = "green")
data$colour<-c("")
data[which(data$Dataset=="EPA - 6mDMA1"),]$colour<-1
data[which(data$Dataset=="NACR"),]$colour<-2
data[which(data$Dataset=="FAQSD"),]$colour<-3
data[which(data$Dataset=="EPA - 6mMDA8"),]$colour<-4
data[which(data$Dataset=="GBD"),]$colour<-5
data$variable<-as.factor(data$colour)
data$linetype<-as.factor(data$linetype)
p<-ggplot(data,aes(x=Year,y=`PWA_O3`,group=Dataset,colour=Dataset,linetype=linetype))+
#ggtitle("Population-Weighted Averages of Ozone Concentrations")+
geom_line()+
geom_point()+
guides(linetype=FALSE)+
theme(panel.background = element_rect(fill="white",colour="white"),
panel.grid.major = element_line(linetype="blank"),
panel.grid.minor = element_line(linetype="blank"),
plot.title = element_text(hjust = 0.5),
axis.line = element_line(colour = "black"),
plot.background = element_rect(color = "black", size = 0.5),
panel.border = element_rect(colour = "black", fill=NA, size=0.5))+
#ylim(0,75)+
ylab("Ozone (ppb)")+
scale_color_manual(name="Dataset",
labels=c("EPA - 6mMDA1","EPA - 6mMDA8",
"NACR - 6mMDA1", "FAQSD - 6mMDA8","GBD - 6mMDA8"),
values=colors)+
scale_fill_manual(values=colors)
p
colors <- c("EPA - 6mDMA1" = "blue", "NACR" = "red","FAQSD" = "gray","EPA - 6mMDA8" = "#00FFFF", "GBD" = "green")
data$colour<-c("")
data[which(data$Dataset=="EPA - 6mDMA1"),]$colour<-1
data[which(data$Dataset=="NACR"),]$colour<-2
data[which(data$Dataset=="FAQSD"),]$colour<-3
data[which(data$Dataset=="EPA - 6mMDA8"),]$colour<-4
data[which(data$Dataset=="GBD"),]$colour<-5
data$variable<-as.factor(data$colour)
data$linetype<-as.factor(data$linetype)
p<-ggplot(data,aes(x=Year,y=`PWA_O3`,group=Dataset,colour=Dataset,linetype=linetype))+
#ggtitle("Population-Weighted Averages of Ozone Concentrations")+
geom_line()+
geom_point()+
guides(linetype=FALSE)+
theme(panel.background = element_rect(fill="white",colour="white"),
panel.grid.major = element_line(linetype="blank"),
panel.grid.minor = element_line(linetype="blank"),
plot.title = element_text(hjust = 0.5),
axis.line = element_line(colour = "black"),
plot.background = element_rect(color = "black", size = 0.5),
panel.border = element_rect(colour = "black", fill=NA, size=0.5))+
#ylim(0,75)+
ylab("Ozone (ppb)")+
scale_color_manual(name="Dataset",
labels=c("EPA - 6mMDA1","EPA - 6mMDA8",
"NACR - 6mMDA1", "FAQSD - 6mMDA8","GBD - 6mMDA8"),
values=colors)+
scale_fill_manual(values=colors)
p
p<-ggplot(data,aes(x=Year,y=`PWA_O3`,group=Dataset,colour=Dataset,linetype=linetype))+
#ggtitle("Population-Weighted Averages of Ozone Concentrations")+
geom_line()+
geom_point()+
guides(linetype=FALSE)+
theme(panel.background = element_rect(fill="white",colour="white"),
panel.grid.major = element_line(linetype="blank"),
panel.grid.minor = element_line(linetype="blank"),
plot.title = element_text(hjust = 0.5),
axis.line = element_line(colour = "black"),
plot.background = element_rect(color = "black", size = 0.5),
panel.border = element_rect(colour = "black", fill=NA, size=0.5))+
#ylim(0,75)+
ylab("Ozone (ppb)")+
scale_color_manual(name="Dataset",
labels=c("EPA - 6mMDA1","NACR - 6mMDA1","FAQSD - 6mMDA8",
"EPA - 6mMDA8","GBD - 6mMDA8"),
values=colors)+
scale_fill_manual(values=colors)
p
