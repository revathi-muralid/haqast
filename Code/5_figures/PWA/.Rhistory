mutate(Dist = as.numeric(st_distance(point_sf[i], target_sf, by_element = TRUE))) %>%
# Filter the records with Dist <= 540000 (m)
filter(Dist <= 540000)
#
# # Reattach wildfire data to df of monitors within 540km of wildfire i
if((nrow(target_sf2)>0)==T){
target_sf2$incident_id<-point_sf$incident_id[i]
target_sf2$incident_name<-point_sf$incident_name[i]
target_sf2$start_date<-point_sf$start_dates[i]
target_sf2$end_date<-point_sf$end_dates[i]
#
# # Subset dataset of PA observations for only monitors selected from above
# # Also select for time range of relevant wildfire
# pm_temp is df of all PA obs w/in 540km of wildfire i for dates wildfire i took place
pm_temp<-pm_all%>%filter(ID %in% target_sf2$ID & date_only >= "2020-07-01" & date_only <= "2020-11-01")
mydfs[[i]]<-pm_temp
}
}
for(i in 1:10){ #nrow = 258
target_sf2 <- target_sf %>% # target_sf stays the same
mutate(target_sf2[, Dist] = as.numeric(st_distance(point_sf[i], target_sf, by_element = TRUE))) %>%
# Filter the records with Dist <= 540000 (m)
filter(Dist <= 540000)
#
# # Reattach wildfire data to df of monitors within 540km of wildfire i
if((nrow(target_sf2)>0)==T){
target_sf2$incident_id<-point_sf$incident_id[i]
target_sf2$incident_name<-point_sf$incident_name[i]
target_sf2$start_date<-point_sf$start_dates[i]
target_sf2$end_date<-point_sf$end_dates[i]
#
# # Subset dataset of PA observations for only monitors selected from above
# # Also select for time range of relevant wildfire
# pm_temp is df of all PA obs w/in 540km of wildfire i for dates wildfire i took place
pm_temp<-pm_all%>%filter(ID %in% target_sf2$ID & date_only >= "2020-07-01" & date_only <= "2020-11-01")
mydfs[[i]]<-pm_temp
}
}
mydfs<-list()
for(i in 1:10){ #nrow = 258
target_sf2 <- target_sf %>% # target_sf stays the same
target_sf2[, Dist := as.numeric(st_distance(point_sf[i], target_sf, by_element = TRUE))]
target_sf2 <- target_sf2[Dist <= 540000]
# Filter the records with Dist <= 540000 (m)
# # Reattach wildfire data to df of monitors within 540km of wildfire i
if((nrow(target_sf2)>0)==T){
target_sf2[, incident_id = point_sf$incident_id[i]]
target_sf2[, incident_name = point_sf$incident_name[i]]
target_sf2[ ,start_date = point_sf$start_dates[i]]
target_sf2[, end_date = point_sf$end_dates[i]]
#
# # Subset dataset of PA observations for only monitors selected from above
# # Also select for time range of relevant wildfire
# pm_temp is df of all PA obs w/in 540km of wildfire i for dates wildfire i took place
pm_temp<-pm_all%>%filter(ID %in% target_sf2$ID & date_only >= "2020-07-01" & date_only <= "2020-11-01")
mydfs[[i]]<-pm_temp
}
}
mydfs<-list()
for(i in 1:10){ #nrow = 258
target_sf2 <- target_sf # target_sf stays the same
target_sf2[, Dist := as.numeric(st_distance(point_sf[i], target_sf, by_element = TRUE))]
target_sf2 <- target_sf2[Dist <= 540000]
# Filter the records with Dist <= 540000 (m)
# # Reattach wildfire data to df of monitors within 540km of wildfire i
if((nrow(target_sf2)>0)==T){
target_sf2[, incident_id = point_sf$incident_id[i]]
target_sf2[, incident_name = point_sf$incident_name[i]]
target_sf2[ ,start_date = point_sf$start_dates[i]]
target_sf2[, end_date = point_sf$end_dates[i]]
#
# # Subset dataset of PA observations for only monitors selected from above
# # Also select for time range of relevant wildfire
# pm_temp is df of all PA obs w/in 540km of wildfire i for dates wildfire i took place
pm_temp<-pm_all%>%filter(ID %in% target_sf2$ID & date_only >= "2020-07-01" & date_only <= "2020-11-01")
mydfs[[i]]<-pm_temp
}
}
rm(list=ls())
if (!require('data.table')) {
install.packages('data.table')
library(data.table)
}
if (!require('rgdal')) {
install.packages('rgdal')
library(rgdal)
}
if (!require('tidyverse')) {
install.packages('tidyverse')
library(tidyverse)
}
if (!require('sf')) {
install.packages('sf')
library(sf)
}
#setwd('purpleair')
# Read in wildfire Purple Air shapefile - 3967 monitors
pa_shp<-readOGR(dsn="purpleair/8_PA_wildfires_shp")
pa_data<-pa_shp@data
pm_all<-fread("purpleair/7_output/CA_PM25_allPurpleAir_2020.csv")
pm_all$date_only<-as.POSIXct(as.numeric(as.character(pm_all$created_at)), origin="1970-01-01", tz="GMT")
pm_all$date_only<-as.Date(pm_all$date_only,origin="1970-01-01",format='%Y-%m-%d')
# Find closest wildfire to each monitor
fire_20<-read.csv('purpleair/6_CALFIRE/CA_fires_2020.csv')
# Find all dates for wildfires
fire_dates<-fire_20[,c("incident_name","incident_id","incident_longitude",
"incident_latitude","incident_dateonly_created","incident_dateonly_extinguished")]
date_ranges<-fire_dates
names(date_ranges)[5:6]<-c("start_dates","end_dates")
date_ranges<-date_ranges[!duplicated(date_ranges),]
row.names(date_ranges)<-1:nrow(date_ranges)
for(i in 1:nrow(date_ranges)){
date_ranges$end_dates[i]<-ifelse(date_ranges$end_dates[i]=="",date_ranges$start_dates[i],date_ranges$end_dates[i])
}
# Find all sensors within 540km of wildfire for each date range
site_coordinates_crs<-CRS("+proj=longlat +datum=WGS84")
point_sf <- st_as_sf(date_ranges, coords = c("incident_longitude", "incident_latitude"),crs=site_coordinates_crs)
# Set the projection to EPSG 4326 (long-lat)
st_crs(point_sf) <- 4326
# Specify the source of X and Y coordinates
target_sf <- st_as_sf(pa_data, coords = c("Lon", "Lat"),crs=site_coordinates_crs)
# Set the projection to EPSG 4326 (long-lat)
st_crs(target_sf) <- 4326
#st_crs(coordinates)
#coordinates_aes<-st_transform(coordinates,crs(nlcd))
# Loop through point_sf row by row to get a df for each wildfire
# Save df from each loop iteration to df list mydfs
mydfs<-list()
for(i in 11:20){ #nrow = 258
target_sf2 <- target_sf %>% # target_sf stays the same
mutate(Dist = as.numeric(st_distance(point_sf[c(i),], target_sf, by_element = TRUE))) %>%
# Filter the records with Dist <= 540000 (m)
filter(Dist <= 540000)
#
# # Reattach wildfire data to df of monitors within 540km of wildfire i
if((nrow(target_sf2)>0)==T){
target_sf2$incident_id<-point_sf$incident_id[i]
target_sf2$incident_name<-point_sf$incident_name[i]
target_sf2$start_date<-point_sf$start_dates[i]
target_sf2$end_date<-point_sf$end_dates[i]
#
# # Subset dataset of PA observations for only monitors selected from above
# # Also select for time range of relevant wildfire
# pm_temp is df of all PA obs w/in 540km of wildfire i for dates wildfire i took place
pm_temp<-pm_all%>%filter(ID %in% target_sf2$ID & date_only >= "2020-07-01" & date_only <= "2020-11-01")
mydfs[[i]]<-pm_temp
}
}
pm_clean<-rbindlist(mydfs)#6696675 obs - 48 million
pm_final<-pm_clean[which(!duplicated(pm_clean)),] #7.8 million obs
fwrite(pm_final,'pm_clean_11-20.csv',na="",row.names=F)
fwrite(pm_final,'pm_clean_11-20.csv',na="",row.names=F)
target_sf<-data.table(target_sf)
point_sf<-data.table(point_sf)
target_sf2 <- target_sf  # target_sf stays the same
mydfs<-list()
for(i in 1:1){ #nrow = 258
target_sf2 <- target_sf  # target_sf stays the same
target_sf2[, Dist := as.numeric(st_distance(point_sf[i], target_sf, by_element=TRUE))]
# Filter the records with Dist <= 540000 (m)
target_sf2[, Dist <= 540000]
# # Reattach wildfire data to df of monitors within 540km of wildfire i
if((nrow(target_sf2)>0)==T){
target_sf2[, incident_id = point_sf[ incident_id, i]]
target_sf2[, incident_name = point_sf[incident_name, i]]
target_sf2[, start_date = point_sf[start_dates, i]]
target_sf2[, end_date = point_sf[end_dates, i]]
#
# # Subset dataset of PA observations for only monitors selected from above
# # Also select for time range of relevant wildfire
# pm_temp is df of all PA obs w/in 540km of wildfire i for dates wildfire i took place
pm_temp<-pm_all[, ID %in% target_sf2$ID]
pm_temp<-pm_temp[, date_only >= "2020-07-01"]
pm_temp<-pm_temp[, date_only <= "2020-11-01"]
mydfs[[i]]<-pm_temp
}
}
rm(list=ls())
if (!require('data.table')) {
install.packages('data.table')
library(data.table)
}
if (!require('rgdal')) {
install.packages('rgdal')
library(rgdal)
}
if (!require('tidyverse')) {
install.packages('tidyverse')
library(tidyverse)
}
if (!require('sf')) {
install.packages('sf')
library(sf)
}
#setwd('purpleair')
# Read in wildfire Purple Air shapefile - 3967 monitors
pa_shp<-readOGR(dsn="purpleair/8_PA_wildfires_shp")
pa_data<-pa_shp@data
pm_all<-fread("purpleair/7_output/CA_PM25_allPurpleAir_2020.csv")
pm_all$date_only<-as.POSIXct(as.numeric(as.character(pm_all$created_at)), origin="1970-01-01", tz="GMT")
pm_all$date_only<-as.Date(pm_all$date_only,origin="1970-01-01",format='%Y-%m-%d')
# Find closest wildfire to each monitor
fire_20<-read.csv('purpleair/6_CALFIRE/CA_fires_2020.csv')
# Find all dates for wildfires
fire_dates<-fire_20[,c("incident_name","incident_id","incident_longitude",
"incident_latitude","incident_dateonly_created","incident_dateonly_extinguished")]
date_ranges<-fire_dates
names(date_ranges)[5:6]<-c("start_dates","end_dates")
date_ranges<-date_ranges[!duplicated(date_ranges),]
row.names(date_ranges)<-1:nrow(date_ranges)
for(i in 1:nrow(date_ranges)){
date_ranges$end_dates[i]<-ifelse(date_ranges$end_dates[i]=="",date_ranges$start_dates[i],date_ranges$end_dates[i])
}
# Find all sensors within 540km of wildfire for each date range
site_coordinates_crs<-CRS("+proj=longlat +datum=WGS84")
point_sf <- st_as_sf(date_ranges, coords = c("incident_longitude", "incident_latitude"),crs=site_coordinates_crs)
# Set the projection to EPSG 4326 (long-lat)
st_crs(point_sf) <- 4326
# Specify the source of X and Y coordinates
target_sf <- st_as_sf(pa_data, coords = c("Lon", "Lat"),crs=site_coordinates_crs)
# Set the projection to EPSG 4326 (long-lat)
st_crs(target_sf) <- 4326
rm(list=ls())
library(plyr)
library(dplyr)
library(ggplot2)
library(data.table)
library(janitor)
library(tidyr)
# Set working directory
setwd('/nas/longleaf/home/revathi/HAQAST/thesis/Code/5_figures/PWA/')
mynames<-c('Lon', 'Lat', 'O3', 'P_TOT', 'PWA_O3','Year')
year1=2007
yearlast=2017
nYear=yearlast-year1
for(i in year1:yearlast){
fname<-paste("FAQSD_O3_PWA_",i,".csv",sep="")
data<-fread(fname)
data$Year<-i
data[c(nrow(data)+1),]<-names(data)
names(data)<-mynames
assign(paste("data",i,sep=""),data)
}
rm(data)
data<-rbindlist(mget(ls()[grep("data",ls())]))
data<-data %>% mutate_if(is.character,as.numeric)
d2<-data%>%group_by(Year)%>%summarise_at(vars(PWA_O3),sum,na.rm=T)
p<-ggplot(d2,aes(x=Year,y=`PWA_O3`))+
ggtitle("O3 Population-Weighted Avg. from 2007-2017 (FAQSD)")+geom_line()+
guides(color=F)
p + theme(panel.background = element_rect(fill="white",colour="white"),
panel.grid.major = element_line(linetype="blank"),
panel.grid.minor = element_line(linetype="blank")) +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=1))
d2$'Dataset'<-c("FAQSD")
d2$'Pollutant'<-c("O3")
write.csv(d2,'FAQSD_O3_2007-2017_PWA_results.csv',na="",row.names=F)
rm(list=ls())
library(plyr)
library(dplyr)
library(ggplot2)
library(data.table)
library(janitor)
library(tidyr)
setwd('/nas/longleaf/home/revathi/HAQAST/thesis/Code/5_figures/PWA/')
myfiles<-list.files()[grep(".csv",list.files())]
myfiles
myfiles<-list.files()[grep(".resultscsv",list.files())]
myfiles<-list.files()[grep("results.csv",list.files())]
myfiles
data1<-fread(myfiles[1])
data2<-fread(myfiles[2])
data3<-fread(myfiles[6])
data4<-fread(myfiles[4])
data<-rbindlist(mget(ls()[grep("data",ls())]))
data[which(data$Dataset=="CMAQ_1hr"),]$Dataset<-c("EPA - hrly")
data[which(data$Dataset=="CMAQ_MDA8"),]$Dataset<-c("EPA - MDA8")
colors <- c("EPA - hrly" = "blue", "NACR" = "red",  "FAQSD" = "green","EPA - MDA8" = "purple")
data$colour<-c("")
data[which(data$Dataset=="EPA - hrly"),]$colour<-1
data[which(data$Dataset=="NACR"),]$colour<-2
data[which(data$Dataset=="FAQSD"),]$colour<-3
data[which(data$Dataset=="EPA - MDA8"),]$colour<-4
data$variable<-as.factor(data$colour)
p<-ggplot(data,aes(x=Year,y=`PWA_O3`,group=Dataset,colour=Dataset))+
ggtitle("Population-Weighted Averages of Ozone Concentrations")+
geom_line()+
geom_point()+
guides()+
theme(panel.background = element_rect(fill="white",colour="white"),
panel.grid.major = element_line(linetype="blank"),
panel.grid.minor = element_line(linetype="blank"))+
ylim(0,75)+
scale_color_manual(values = colors)+
scale_fill_manual(values=colors)
p
rm(list=ls())
library(plyr)
library(dplyr)
library(ggplot2)
library(data.table)
library(janitor)
library(tidyr)
# Create figure
# Set working directory
setwd('/nas/longleaf/home/revathi/HAQAST/thesis/Code/5_figures/PWA/')
myfiles<-list.files()[grep("results.csv",list.files())]
myfiles
rm(list=ls())
library(plyr)
library(dplyr)
library(ggplot2)
library(data.table)
library(janitor)
library(tidyr)
# Set working directory
setwd('/nas/longleaf/home/revathi/HAQAST/thesis/Code/5_figures/PWA/')
mynames<-c('Lon', 'Lat', 'O3', 'P_TOT', 'PWA_O3','Year')
year1=2009
yearlast=2016
nYear=yearlast-year1
for(i in year1:yearlast){
fname<-paste("NACR_O3_PWA_",i,".csv",sep="")
data<-fread(fname)
data$Year<-i
data[c(nrow(data)+1),]<-names(data)
names(data)<-mynames
assign(paste("data",i,sep=""),data)
}
rm(data)
data<-rbindlist(mget(ls()[grep("data",ls())]))
data<-data %>% mutate_if(is.character,as.numeric)
d2<-data%>%group_by(Year)%>%summarise_at(vars(PWA_O3),sum,na.rm=T)
d2$'Dataset'<-c("NACR")
d2$'Pollutant'<-c("O3")
rite.csv(d2,'NACR_O3_2009-2016_PWA_results.csv',na="",row.names=F)
write.csv(d2,'NACR_O3_2009-2016_PWA_results.csv',na="",row.names=F)
rm(list=ls())
library(plyr)
library(dplyr)
library(ggplot2)
library(data.table)
library(janitor)
library(tidyr)
setwd('/nas/longleaf/home/revathi/HAQAST/thesis/Code/5_figures/PWA/')
myfiles<-list.files()[grep("results.csv",list.files())]
myfiles
data1<-fread(myfiles[1])
data2<-fread(myfiles[2])
data3<-fread(myfiles[3])
data4<-fread(myfiles[4])
data<-rbindlist(mget(ls()[grep("data",ls())]))
data[which(data$Dataset=="CMAQ_1hr"),]$Dataset<-c("EPA - hrly")
data[which(data$Dataset=="CMAQ_MDA8"),]$Dataset<-c("EPA - MDA8")
colors <- c("EPA - hrly" = "blue", "NACR" = "red",  "FAQSD" = "green","EPA - MDA8" = "purple")
data$colour<-c("")
data[which(data$Dataset=="EPA - hrly"),]$colour<-1
data[which(data$Dataset=="NACR"),]$colour<-2
data[which(data$Dataset=="FAQSD"),]$colour<-3
data[which(data$Dataset=="EPA - MDA8"),]$colour<-4
data$variable<-as.factor(data$colour)
p<-ggplot(data,aes(x=Year,y=`PWA_O3`,group=Dataset,colour=Dataset))+
ggtitle("Population-Weighted Averages of Ozone Concentrations")+
geom_line()+
geom_point()+
guides()+
theme(panel.background = element_rect(fill="white",colour="white"),
panel.grid.major = element_line(linetype="blank"),
panel.grid.minor = element_line(linetype="blank"))+
ylim(0,75)+
scale_color_manual(values = colors)+
scale_fill_manual(values=colors)
p
View(data)
data[which(data$Dataset=="EPA"),]$Dataset<-c("NACR")
colors <- c("EPA - hrly" = "blue", "NACR" = "red",  "FAQSD" = "green","EPA - MDA8" = "purple")
data$colour<-c("")
data[which(data$Dataset=="EPA - hrly"),]$colour<-1
data[which(data$Dataset=="NACR"),]$colour<-2
data[which(data$Dataset=="FAQSD"),]$colour<-3
data[which(data$Dataset=="EPA - MDA8"),]$colour<-4
data$variable<-as.factor(data$colour)
p<-ggplot(data,aes(x=Year,y=`PWA_O3`,group=Dataset,colour=Dataset))+
ggtitle("Population-Weighted Averages of Ozone Concentrations")+
geom_line()+
geom_point()+
guides()+
theme(panel.background = element_rect(fill="white",colour="white"),
panel.grid.major = element_line(linetype="blank"),
panel.grid.minor = element_line(linetype="blank"))+
ylim(0,75)+
scale_color_manual(values = colors)+
scale_fill_manual(values=colors)
p
rm(list=ls())
library(plyr)
library(dplyr)
library(ggplot2)
library(data.table)
library(janitor)
library(tidyr)
# Set working directory
setwd('/nas/longleaf/home/revathi/HAQAST/thesis/Code/5_figures/PWA/')
myfiles<-list.files()[grep("results.csv",list.files())]
myfiles
data1<-fread(myfiles[1])
data2<-fread(myfiles[2])
data3<-fread(myfiles[4])
data4<-fread(myfiles[6])
data<-rbindlist(mget(ls()[grep("data",ls())]))
unique(data$Dataset)
data[which(data$Dataset=="CMAQ_1hr"),]$Dataset<-c("EPA - hrly")
data[which(data$Dataset=="CMAQ_MDA8"),]$Dataset<-c("EPA - MDA8")
colors <- c("EPA - hrly" = "blue", "NACR" = "red",  "FAQSD" = "green","EPA - MDA8" = "purple")
data$colour<-c("")
data[which(data$Dataset=="EPA - hrly"),]$colour<-1
data[which(data$Dataset=="NACR"),]$colour<-2
data[which(data$Dataset=="FAQSD"),]$colour<-3
data[which(data$Dataset=="EPA - MDA8"),]$colour<-4
data$variable<-as.factor(data$colour)
p<-ggplot(data,aes(x=Year,y=`PWA_O3`,group=Dataset,colour=Dataset))+
ggtitle("Population-Weighted Averages of Ozone Concentrations")+
geom_line()+
geom_point()+
guides()+
theme(panel.background = element_rect(fill="white",colour="white"),
panel.grid.major = element_line(linetype="blank"),
panel.grid.minor = element_line(linetype="blank"))+
ylim(0,75)+
scale_color_manual(values = colors)+
scale_fill_manual(values=colors)
p
p<-ggplot(data,aes(x=Year,y=`PWA_O3`,group=Dataset,colour=Dataset))+
ggtitle("Population-Weighted Averages of Ozone Concentrations")+
geom_line()+
geom_point()+
guides()+
theme(panel.background = element_rect(fill="white",colour="white"),
panel.grid.major = element_line(linetype="blank"),
panel.grid.minor = element_line(linetype="blank"))+
ylim(0,75)+
ylab("Ozone (ppb)")
p<-ggplot(data,aes(x=Year,y=`PWA_O3`,group=Dataset,colour=Dataset))+
ggtitle("Population-Weighted Averages of Ozone Concentrations")+
geom_line()+
geom_point()+
guides()+
theme(panel.background = element_rect(fill="white",colour="white"),
panel.grid.major = element_line(linetype="blank"),
panel.grid.minor = element_line(linetype="blank"))+
ylim(0,75)+
ylab("Ozone (ppb)")+
scale_color_manual(values = colors)+
scale_fill_manual(values=colors)
p
colors <- c("EPA - hrly" = "blue", "NACR" = "red",  "FAQSD" = "gray","EPA - MDA8" = "purple")
data$colour<-c("")
data[which(data$Dataset=="EPA - hrly"),]$colour<-1
data[which(data$Dataset=="NACR"),]$colour<-2
data[which(data$Dataset=="FAQSD"),]$colour<-3
data[which(data$Dataset=="EPA - MDA8"),]$colour<-4
data$variable<-as.factor(data$colour)
p<-ggplot(data,aes(x=Year,y=`PWA_O3`,group=Dataset,colour=Dataset))+
ggtitle("Population-Weighted Averages of Ozone Concentrations")+
geom_line()+
geom_point()+
guides()+
theme(panel.background = element_rect(fill="white",colour="white"),
panel.grid.major = element_line(linetype="blank"),
panel.grid.minor = element_line(linetype="blank"))+
ylim(0,75)+
ylab("Ozone (ppb)")+
scale_color_manual(values = colors)+
scale_fill_manual(values=colors)
p
rm(list=ls())
library(plyr)
library(dplyr)
library(ggplot2)
library(data.table)
library(janitor)
library(tidyr)
# Create figure
# Set working directory
setwd('/nas/longleaf/home/revathi/HAQAST/thesis/Code/5_figures/PWA/')
myfiles<-list.files()[grep("_PM25_",list.files())]
myfiles
data1<-fread(myfiles[2])
data2<-fread(myfiles[3])
data3<-fread(myfiles[4])
data4<-fread(myfiles[5])
data<-rbindlist(mget(ls()[grep("data",ls())]))
colors <- c("EPA" = "blue", "NACR" = "red",  "FAQSD" = "gray","SAT" = "orange")
data$colour<-c("")
data[which(data$Dataset=="EPA"),]$colour<-1
data[which(data$Dataset=="NACR"),]$colour<-2
data[which(data$Dataset=="FAQSD"),]$colour<-3
data[which(data$Dataset=="SAT"),]$colour<-4
data$variable<-as.factor(data$colour)
p<-ggplot(data,aes(x=Year,y=`PWA_PM25`,group=Dataset,colour=Dataset))+
ggtitle("Population-Weighted Averages of PM2.5 Concentrations")+
geom_line()+
geom_point()+
guides()+
theme(panel.background = element_rect(fill="white",colour="white"),
panel.grid.major = element_line(linetype="blank"),
panel.grid.minor = element_line(linetype="blank"))+
ylim(0,20)+
ylab("PM2.5 (ug/m3)")+
scale_color_manual(values = colors)+
scale_fill_manual(values=colors)
p
